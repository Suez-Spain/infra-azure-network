#!groovy
def ENVIRONMENT_lowercase = ""
def ENVIRONMENT_uppercase = ""

def terraformApply = ""
def userInput = ""

def TF_BIN = ""
def TF_DIR = "infrastructure/terraform"
def WDIR = ""


pipeline {
	// agent { label 'docker-slave-cloud-test' }
    agent { label 'slave-drop'}

    options { 
        disableConcurrentBuilds()
        ansiColor('xterm')
        timestamps()
        buildDiscarder(logRotator(numToKeepStr: "5"))
    }
    
    parameters {
        booleanParam(
            name: 'REFRESH',
            defaultValue: false,
            description: 'Reload Jenkinsfile and finish.'
        )
        choice(
            name: "ENVIRONMENT",
            choices: [
                "DEV",
                "INT",
                "PRE",
                "FOR",
                "PRO"],
            description: 'Environment to manage' 
        )
        string(name: "PROJECT", 
            defaultValue: "",
            description: "Project name. Used for create directory path.",
            trim: true)
        choice(
            name: "ACTION",
            choices: [
                "Plan",
                "Apply",
                "Destroy"],
            description: 'Terraform Action to take' 
        )
        
    }

    stages {
        stage('Reload Jenkinsfile') {
            when {
                expression { params.REFRESH == true }
            }
            steps {
                echo("*******************************************")
                echo("\tExecution for refresh Pipeline")
                echo("\tNo more actions will be taken")
                echo("*******************************************")
                script { return }
            }
        }

        stage('Execute Pipeline') {
            when {
                expression { params.REFRESH != true }
            }
            stages {      
                stage ('____________ Prepare Environment ____________') {
                    steps{
                        script {
                            ENVIRONMENT_lowercase = params.ENVIRONMENT.toLowerCase()
                            ENVIRONMENT_uppercase = ENVIRONMENT
                            WDIR = "${TF_DIR}/SUEZSpain/SUEZSpain-${ENVIRONMENT_uppercase}-vnet/SUEZSpain-${ENVIRONMENT_uppercase}${PROJECT}"
                        }
                    }
                }
                stage("____________ Terraform - Configure ____________") {
                    steps{
                        echo "_______________________ Terraform Provider _______________________"
                        script{
                            if (ENVIRONMENT_lowercase == "int" || ENVIRONMENT_lowercase == "for"){
                                ENVIRONMENT_lowercase = "pre"
                            }
                            withCredentials([azureServicePrincipal(credentialsId: "azure_arq_${ENVIRONMENT_lowercase}_service_principal",
                                subscriptionIdVariable: 'SUBS_ID',
                                clientIdVariable: 'CLIENT_ID',
                                clientSecretVariable: 'CLIENT_SECRET',
                                tenantIdVariable: 'TENANT_ID'),
                                string(credentialsId: 'azure-terraform-storage-key', variable: 'STORAGE_KEY')]) {
                                    //Variables per l'Azure Resource Manager de Terraform 
                                    env.ARM_TENANT_ID = TENANT_ID
                                    env.ARM_CLIENT_ID = CLIENT_ID
                                    env.ARM_CLIENT_SECRET = CLIENT_SECRET
                                    env.ARM_SUBSCRIPTION_ID = SUBS_ID
                                    env.ARM_ACCESS_KEY = STORAGE_KEY
                                    
                                    //Variables per codi Terraform
                                    env.TF_VAR_tenant_id = TENANT_ID
                                    env.TF_VAR_subscription_id = SUBS_ID
                                    // EN AQUEST PUNT ENVIRONMENT MANTÉ LA OPCIÓ SEL.LECCIONADA I NO ES CANVIA COM ENVIRONMENT_lowercase EN EL CAS DE INT O FOR
                                    env.TF_VAR_environment = ENVIRONMENT

                                    sh "az login --service-principal -u ${CLIENT_ID} -p ${CLIENT_SECRET} -t ${TENANT_ID}"
                                    sh "az config set extension.use_dynamic_install=yes_without_prompt"


                            }
                            sh "wget -q -O terraform_0.12.30_linux_amd64.zip https://releases.hashicorp.com/terraform/0.12.30/terraform_0.12.30_linux_amd64.zip"
                            sh "unzip -o terraform_0.12.30_linux_amd64.zip -d bin"
                            sh "chmod +x bin/terraform"

                            TF_BIN = "${WORKSPACE}/bin/terraform"
                            sh "${TF_BIN} version"

                            // Tormen a possar l'entorn que toca
                            ENVIRONMENT_lowercase = params.ENVIRONMENT.toLowerCase()

                        }
                    }
                }
                stage("____________ Execute Terraform Actions ____________") {
                    steps{
                        echo "_______________________ Terraform ${ACTION} _______________________"
                        script{
                            terraform_exec(ACTION, WDIR, ENVIRONMENT, TF_BIN)
                        }
                    }
                }
            }
        }
    }
}

def terraform_exec(String TF_ACTION, String TF_PATH, String ENV, String TF_BIN) {
    dir("${TF_PATH}") {
        sh "rm -rf .terraform"
        sh "sed -i 's/{{ENV}}/${ENV.toUpperCase()}/g' `ls -1 *.tf | grep -v variables`"
        sh "sed -i 's/{{PROJECT}}/${PROJECT.toLowerCase()}/g' `ls -1 *.tf | grep -v variables`"
        sh "${TF_BIN} init"
        sh "${TF_BIN} plan -lock=false"

        if ( TF_ACTION == "Apply" || TF_ACTION == "Destroy" ) {
            userInput = input(
                id: 'confirm', 
                message: "${TF_ACTION} Terraform?", 
                parameters: [ [$class: 'BooleanParameterDefinition', defaultValue: false, description: "${TF_ACTION} terraform", name: "terraform${TF_ACTION}"] ])

            if ( userInput == true ) {
                echo "_______________________ Terraform ${TF_ACTION} _______________________"

                sh "${TF_BIN} ${TF_ACTION.toLowerCase()} --auto-approve"
            }
        }
    }
}